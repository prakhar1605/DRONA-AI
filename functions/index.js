const { VertexAI } = require('@google-cloud/vertexai');
const functions = require('firebase-functions');
const admin = require('firebase-admin');

admin.initializeApp();

// Initialize Vertex AI once (better performance)
const vertexAI = new VertexAI({
  project: 'drona-ai-ad064',
  location: 'us-central1'
});

const model = vertexAI.getGenerativeModel({
  model: 'gemini-1.5-flash',
  safetySettings: {
    harassment: 'BLOCK_NONE',
    hate: 'BLOCK_NONE',
    sexual: 'BLOCK_NONE',
    dangerous: 'BLOCK_NONE'
  },
  generationConfig: {
    maxOutputTokens: 2000,
    temperature: 0.7,
    topP: 0.9
  },
  systemInstruction: {
    parts: [{
      text: "You are Drona AI, an expert tutor specialized in exam preparation. " +
            "Provide clear, concise explanations with examples. " +
            "Format responses with Markdown for better readability."
    }]
  }
});

exports.askGemini = functions.https.onCall(async (data, context) => {
  // Authentication check
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'Authentication required');
  }

  // Rate limiting (1 request per 5 seconds)
  const userRef = admin.firestore().collection('users').doc(context.auth.uid);
  const userDoc = await userRef.get();
  const lastRequestTime = userDoc.data()?.lastRequestTime || 0;
  
  if (Date.now() - lastRequestTime < 5000) {
    throw new functions.https.HttpsError('resource-exhausted', 'Please wait 5 seconds between requests');
  }

  try {
    // Update last request time
    await userRef.update({
      lastRequestTime: Date.now(),
      questionCount: admin.firestore.FieldValue.increment(1)
    });

    // Generate response
    const result = await model.generateContent({
      contents: [{
        role: 'user',
        parts: [{ text: `Student asks: ${data.question}\n\nContext: Preparing for ${data.subject || 'general'} exams` }]
      }]
    });

    const responseText = result.response.candidates[0].content.parts[0].text;

    // Store question in Firestore
    await admin.firestore().collection('questions').add({
      userId: context.auth.uid,
      question: data.question,
      answer: responseText,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      subject: data.subject || 'general'
    });

    return { 
      reply: responseText,
      sources: [
        "Generated by Google Gemini 1.5 Flash",
        `Response ID: ${result.response.candidates[0].finishReason}`
      ]
    };

  } catch (error) {
    console.error('Gemini Error:', error);
    throw new functions.https.HttpsError(
      'internal',
      'AI service unavailable',
      error.message
    );
  }
});